<%@ jet
	imports="
		java.util.List
		java.util.ArrayList
		java.util.Vector
		java.util.Map
		org.talend.core.GlobalServiceRegister
		org.talend.core.model.process.IProcess
		org.talend.core.model.process.INode
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.EConnectionType
		org.talend.core.model.process.IElementParameter
		org.talend.core.model.process.IContextParameter
		org.talend.core.model.process.ElementParameterParser
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.utils.NodeUtil
		org.talend.core.model.utils.JavaResourcesHelper
		org.talend.core.ui.branding.IBrandingService
		org.talend.core.ui.branding.AbstractBrandingService
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.designer.runprocess.CodeGeneratorRoutine
		org.talend.designer.codegen.i18n.Messages
		org.talend.designer.codegen.ITalendSynchronizer
		org.talend.core.utils.TalendQuoteUtils
	"
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	Vector v = (Vector) codeGenArgument.getArgument();
	IProcess process = (IProcess) v.get(0);
	String version = (String) v.get(1);

/*
	boolean startable = false;
	for (INode node : (List< ? extends INode>)process.getGraphicalNodes()) {
		Object value = node.getPropertyValue("STARTABLE");
		startable = value == null? false:(Boolean)value;
		if(startable){
			break;
		}
	}
*/
	boolean stats = codeGenArgument.isStatistics();

%>
			private String propertyToString(Object obj){
				if(obj!=null && obj instanceof java.util.Date){
					return String.format("yyyy-MM-dd HH:mm:ss;%tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS",obj);
				}else{
					return String.valueOf(obj);
				}
			}

<%
			List<? extends INode> cMailNodes = process.getNodesOfType("cMail");
			if(cMailNodes.size() > 0){
%>
				private org.apache.camel.component.mail.MailEndpoint getMailEndpoint(
						String uri, String username, String password, String subject,
						String from, String to, String cc, String bcc) {
					org.apache.camel.component.mail.MailEndpoint endpoint = (org.apache.camel.component.mail.MailEndpoint) endpoint(uri);
					org.apache.camel.component.mail.MailConfiguration configuration = endpoint.getConfiguration();
					configuration.setUsername(username);
					configuration.setPassword(password);
					configuration.setSubject(subject);
					if(null != from && !"".equals(from)){
						configuration.setFrom(from);
					}
					if(null != to && !"".equals(to)){
						configuration.setTo(to);
					}
					if(null != cc && !"".equals(cc)){
						configuration.setCC(cc);
					}
					if(null != bcc && !"".equals(bcc)){
						configuration.setBCC(bcc);
					}
					return endpoint;
				}
<%
			}

			List<? extends INode> cFtpNodes = process.getNodesOfType("cFtp");
			if(cFtpNodes.size() > 0){
			// for fix [TESB-15654], Set custom server port for cFTP
%>
			private org.apache.camel.component.file.remote.RemoteFileEndpoint<?> getFtpEndpoint(
					String uri, String server, int port, String username, String password,
					String directory) {
				org.apache.camel.component.file.remote.RemoteFileEndpoint<?> endpoint;
				endpoint = (org.apache.camel.component.file.remote.RemoteFileEndpoint<?>) endpoint(uri);
				org.apache.camel.component.file.remote.RemoteFileConfiguration configuration = endpoint
						.getConfiguration();
				configuration.setUsername(username);
				configuration.setPassword(password);
				configuration.setHost(server);
				configuration.setPort(port);
				configuration.setDirectory(directory);
				return endpoint;
			}
<%
			}

			boolean hasCXFSamlTokenProvider = false;
			boolean hasCXFSamlTokenConsumer = false;
			boolean hasCXFSamlTokenAuthorizationConsumer = false;
            boolean hasCXFSamlTokenAuthorizationProvider = false;
			boolean hasCXFUsernameTokenProvider = false;
			boolean hasCXFUsernameTokenConsumer = false;
			boolean hasCXFHTTPAuthConsumer = false;
			boolean hasCXFHTTPAuthProvider = false;
			boolean hasCXFComponentConsumer = false;
			boolean hasCXFRegistryProvider = false;
			boolean hasCXFRegistryConsumer = false;
			boolean hasCXFSAMLPropagateConsumer = false;
			boolean isStudioEEVersion = org.talend.core.PluginChecker.isTIS();

            List<INode> cxfNodes = new ArrayList<INode>();
            cxfNodes.addAll(process.getNodesOfType("cCXF"));
			boolean hasCXFComponent = !cxfNodes.isEmpty();
			cxfNodes.addAll(process.getNodesOfType("cCXFRS"));
			for(INode n: cxfNodes) {
			    boolean isProvider = n.getIncomingConnections().isEmpty();
                hasCXFComponentConsumer |= !isProvider;

				String useRegistry = "false";
				if(isStudioEEVersion){
					useRegistry = ElementParameterParser.getValue(n, "__ENABLE_REGISTRY__");
				}
				String useSecurity = ElementParameterParser.getValue(n, "__ENABLE_SECURITY__");
				String formatType = ElementParameterParser.getValue(n, "__DATAFORMAT__");
				if("RAW".equals(formatType) || "CXF_MESSAGE".equals(formatType)){
					useRegistry = "false";
					useSecurity = "false";
				}
				String securityType = ElementParameterParser.getValue(n, "__SECURITY_TYPE__");

				if("true".equals(useRegistry)){
					useSecurity = "false";
					if (isProvider) {
						hasCXFRegistryProvider = true;
					} else {
						hasCXFRegistryConsumer = true;
						if(!hasCXFSAMLPropagateConsumer && Boolean.parseBoolean(ElementParameterParser.getValue(n, "__USE_PROPAGATE_CREDENTIAL__"))){
							hasCXFSAMLPropagateConsumer = true;
						}
					}
				}
				if("true".equals(useSecurity)){
					if("SAML".equals(securityType) && (!hasCXFSamlTokenProvider || !hasCXFSamlTokenConsumer || !hasCXFSAMLPropagateConsumer)){
						if (isProvider) {
							hasCXFSamlTokenProvider = true;
                            if(!hasCXFSamlTokenAuthorizationProvider && isStudioEEVersion){
                                if("true".equals(ElementParameterParser.getValue(n, "__USE_AUTHORIZATION__"))){
                                    hasCXFSamlTokenAuthorizationProvider = true;
                                }
                            }
						} else {
							hasCXFSamlTokenConsumer = true;
							if(!hasCXFSamlTokenAuthorizationConsumer && isStudioEEVersion){
								if("true".equals(ElementParameterParser.getValue(n, "__USE_AUTHORIZATION__"))){
									hasCXFSamlTokenAuthorizationConsumer = true;
								}
							}
							if(!hasCXFSAMLPropagateConsumer){
								String samlSecurityType = ElementParameterParser.getValue(n, "__SAML_SECURITY_TYPES__");
								if("PROPAGATE_UP".equals(samlSecurityType) || "PROPAGATE_AP".equals(samlSecurityType)){
									hasCXFSAMLPropagateConsumer = true;
								}
							}
						}
					}else if("USER".equals(securityType) && (!hasCXFUsernameTokenProvider || !hasCXFUsernameTokenConsumer)){
						if(isProvider){
							hasCXFUsernameTokenProvider = true;
						}else{
							hasCXFUsernameTokenConsumer = true;
						}
					}else if(("BASIC".equals(securityType)||"DIGEST".equals(securityType)) && (!hasCXFHTTPAuthProvider || !hasCXFHTTPAuthConsumer)){
						if(isProvider){
							hasCXFHTTPAuthProvider = true;
						}else{
							hasCXFHTTPAuthConsumer = true;
						}
					}
				}
			}

		if(hasCXFSAMLPropagateConsumer){
%>
			private final static class CXFConsumerBinding extends org.apache.camel.component.cxf.DefaultCxfBinding {
				private org.apache.camel.component.cxf.CxfEndpoint endpoint;

				public CXFConsumerBinding(org.apache.camel.component.cxf.CxfEndpoint endpoint){
					this.endpoint = endpoint;
					setHeaderFilterStrategy(consumerSoapHeaderFilter);
				}
				@Override
				protected void propagateHeadersFromCamelToCxf(org.apache.camel.Exchange camelExchange,
						Map<String, Object> camelHeaders, org.apache.cxf.message.Exchange cxfExchange,
						Map<String, Object> cxfContext) {
					super.propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, cxfContext);
					final Object samlToken = camelHeaders.get("samlToken");
					if (samlToken != null) {
						final Map<String, Object> properties = endpoint.getProperties();
						if (properties != null){
							Object object = properties.get(org.apache.cxf.ws.security.SecurityConstants.STS_CLIENT);
							if (object != null && object instanceof org.apache.cxf.ws.security.trust.STSClient) {
								((org.apache.cxf.ws.security.trust.STSClient) object).setOnBehalfOf(samlToken);
							}
						}
					}
				}
			}
<%		}
		if(hasCXFRegistryProvider || hasCXFSamlTokenProvider){
%>
				private final static class CXFProviderBinding extends org.apache.camel.component.cxf.DefaultCxfBinding{

					@Override
					protected void propagateHeadersFromCxfToCamel( org.apache.cxf.message.Message cxfMessage,
							org.apache.camel.Message camelMessage, org.apache.camel.Exchange camelExchange) {
						super.propagateHeadersFromCxfToCamel(cxfMessage, camelMessage, camelExchange);
						camelExchange.getIn().removeHeader("samlToken");
						org.apache.cxf.security.SecurityContext securityContext = cxfMessage.get(org.apache.cxf.security.SecurityContext.class);
						if(securityContext != null && securityContext instanceof org.apache.cxf.rt.security.saml.claims.SAMLSecurityContext){
							org.w3c.dom.Element assertionElement = ((org.apache.cxf.rt.security.saml.claims.SAMLSecurityContext) securityContext).getAssertionElement();
							if(assertionElement != null){
								camelExchange.getIn().setHeader("samlToken", assertionElement);
							}
						}
					}
				}
<%
			}


			if(hasCXFComponent){
%>

			private org.apache.camel.component.cxf.CxfEndpoint getCxfEndpoint(String uri, boolean isProvider, boolean useAuthorization, boolean usePropagateSamlAP, String... token){
				final org.apache.camel.component.cxf.CxfEndpoint cxfEndpoint = (org.apache.camel.component.cxf.CxfEndpoint) endpoint(uri);
<%
				if(hasCXFHTTPAuthConsumer){
%>
					if (!isProvider&&token!=null &&
							(org.apache.cxf.transport.http.auth.HttpAuthHeader.AUTH_TYPE_BASIC.equals(token[0])
									|| org.apache.cxf.transport.http.auth.HttpAuthHeader.AUTH_TYPE_DIGEST.equals(token[0]))) {
						addHttpAuthConsumer(cxfEndpoint, isProvider, token[0], token[1], token[2]);
					}
<%
				}
				if(hasCXFUsernameTokenConsumer){
%>
				if(!isProvider&&token!=null&&token.length>=3&&"UsernameToken".equals(token[0])){
					addUsernameTokenConsumer(cxfEndpoint, token[1], token[2]);
				}
<%
				}
if(hasCXFUsernameTokenProvider || hasCXFSamlTokenProvider || hasCXFSamlTokenConsumer || hasCXFHTTPAuthProvider || hasCXFRegistryProvider || hasCXFRegistryConsumer){%>
				if (null != policyProvider) {
<%
					if(hasCXFHTTPAuthProvider){
%>
						if (isProvider && token!=null && org.apache.cxf.transport.http.auth.HttpAuthHeader.AUTH_TYPE_BASIC.equals(token[0])) {
							addHttpAuthProvider(cxfEndpoint);
						}
<%
					}
					if(hasCXFUsernameTokenProvider){
%>
						if(isProvider && token!=null && "UsernameToken".equals(token[0])) {
							addUsernameTokenProvider(cxfEndpoint);
						}

<%
					}
					if(hasCXFSamlTokenProvider || hasCXFSamlTokenConsumer){

%>
					if(token!=null&&"SAMLToken".equals(token[0])){
						addSAMLToken(cxfEndpoint,isProvider, useAuthorization, usePropagateSamlAP, token);
					}
<%					}
					if(hasCXFRegistryProvider || hasCXFRegistryConsumer){
%>
					if(token!=null&&"Registry".equals(token[0])){
						addRegistry(cxfEndpoint, isProvider, usePropagateSamlAP, token);
					}
<%}%>
				}
<%
}
%>

				return cxfEndpoint;
			}
<%
			if (hasCXFHTTPAuthConsumer) {
%>
			private void addHttpAuthConsumer(org.apache.camel.component.cxf.CxfEndpoint cxfEndpoint, String type, String username, String password) {
				org.apache.cxf.configuration.security.AuthorizationPolicy authorizationPolicy = new org.apache.cxf.configuration.security.AuthorizationPolicy();
				authorizationPolicy.setAuthorizationType(type);
				authorizationPolicy.setUserName(username);
				authorizationPolicy.setPassword(password);
				cxfEndpoint.getProperties(true).put(org.apache.cxf.configuration.security.AuthorizationPolicy.class.getName(), authorizationPolicy));
			}
<%
			}
			if (hasCXFHTTPAuthProvider) {
%>
			private void addHttpAuthProvider(org.apache.camel.component.cxf.CxfEndpoint cxfEndpoint) {
				org.apache.cxf.interceptor.security.JAASLoginInterceptor jaasLoginInterceptor = new org.apache.cxf.interceptor.security.JAASLoginInterceptor();
				jaasLoginInterceptor.setContextName("karaf");
				cxfEndpoint.getInInterceptors().add(jaasLoginInterceptor);
			}
<%
			}

			if (hasCXFUsernameTokenProvider) {
%>
			private void addUsernameTokenProvider(org.apache.camel.component.cxf.CxfEndpoint cxfEndpoint) {
				org.apache.wss4j.dom.validate.JAASUsernameTokenValidator validator = new org.apache.wss4j.dom.validate.JAASUsernameTokenValidator();
				validator.setContextName("karaf");
				cxfEndpoint.getProperties(true).put(org.apache.cxf.ws.security.SecurityConstants.USERNAME_TOKEN_VALIDATOR, validator));
				cxfEndpoint.getFeatures().add(new org.apache.cxf.ws.policy.WSPolicyFeature(policyProvider.getUsernamePolicy(cxfEndpoint.getBus())));
			}
<%
			}
			if (hasCXFUsernameTokenConsumer) {
%>
			private void addUsernameTokenConsumer(org.apache.camel.component.cxf.CxfEndpoint cxfEndpoint,
					String username, String password) {
				if (null != policyProvider) {
					Map<String, Object> props = new HashMap<String, Object>();
					props.put(org.apache.cxf.rt.security.SecurityConstants.USERNAME, username);
					props.put(org.apache.cxf.rt.security.SecurityConstants.PASSWORD, password);
					cxfEndpoint.setProperties(props);
					cxfEndpoint.getFeatures().add(new org.apache.cxf.ws.policy.WSPolicyFeature(policyProvider.getUsernamePolicy(cxfEndpoint.getBus())));
				} else {
					Map<String, Object> props = new HashMap<String, Object>();
					props.put(org.apache.wss4j.dom.handler.WSHandlerConstants.ACTION, org.apache.wss4j.dom.handler.WSHandlerConstants.USERNAME_TOKEN);
					props.put(org.apache.wss4j.dom.handler.WSHandlerConstants.PASSWORD_TYPE, org.apache.wss4j.common.WSS4JConstants.PW_TEXT);
					props.put(org.apache.wss4j.dom.handler.WSHandlerConstants.USER, username);
					props.put(org.apache.wss4j.dom.handler.WSHandlerConstants.PW_CALLBACK_REF,
						new org.talend.esb.security.saml.WSPasswordCallbackHandler(username, password));
					cxfEndpoint.getOutInterceptors().add(new org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor(props));
				}
			}
<%			}
		}
if(hasCXFSamlTokenConsumer || hasCXFRegistryConsumer){
%>

private Map<String, String> clientProperties;

public void setClientProperties(Map<String, String> clientProperties) {
		this.clientProperties = clientProperties;
}

<%
}

if(hasCXFComponentConsumer){
%>
private final static org.apache.camel.component.cxf.common.header.CxfHeaderFilterStrategy consumerSoapHeaderFilter = new org.apache.camel.component.cxf.common.header.CxfHeaderFilterStrategy();
<%
}
if(hasCXFRegistryProvider || hasCXFRegistryConsumer){
%>
private void addRegistry(org.apache.camel.component.cxf.CxfEndpoint cxfEndpoint,
		boolean isProvider, boolean usePropagateSamlAP, final String... token) {
<%if(hasCXFRegistryConsumer){
%>

	if(!isProvider){
		final org.apache.cxf.Bus bus = cxfEndpoint.getBus();
		if(usePropagateSamlAP && (token[4] == null)){
			usePropagateSamlAP = false ;
		}
		final org.apache.cxf.ws.security.trust.STSClient stsClient;
		if(usePropagateSamlAP) {
            stsClient= org.talend.esb.security.saml.STSClientUtils.createSTSX509Client(bus, token[4]);
		}else {
            stsClient= org.talend.esb.security.saml.STSClientUtils.createSTSClient(bus, token[1], token[2]);
		}
		if (token[3]/*Role*/ != null && !("".equals(token[3]))) {
            org.talend.esb.security.saml.STSClientUtils.applyAuthorization(stsClient, token[3]);
		}

		Map<String, Object> clientProps = new HashMap<String, Object>();
		clientProps.put(org.apache.cxf.ws.security.SecurityConstants.USERNAME,
				token[1]);
		clientProps.put(org.apache.cxf.ws.security.SecurityConstants.PASSWORD,
				token[2]);

		clientProps.put(
				org.apache.cxf.ws.security.SecurityConstants.STS_CLIENT,
				stsClient);

		for (Map.Entry<String, String> entry : clientProperties.entrySet()) {
			if (org.apache.cxf.ws.security.SecurityConstants.ALL_PROPERTIES
					.contains(entry.getKey())) {
				clientProps.put(entry.getKey(), entry.getValue());
			}
		}

		if(usePropagateSamlAP) {
			clientProps.put(org.apache.cxf.ws.security.SecurityConstants.SIGNATURE_USERNAME, token[4]);
			clientProps
			.put(org.apache.cxf.ws.security.SecurityConstants.CALLBACK_HANDLER,
					new org.talend.esb.security.saml.WSPasswordCallbackHandler(token[4], token[2]));
		}else {
			clientProps
			.put(org.apache.cxf.ws.security.SecurityConstants.CALLBACK_HANDLER,
					new org.talend.esb.security.saml.WSPasswordCallbackHandler(
							clientProperties
							.get(org.apache.cxf.ws.security.SecurityConstants.SIGNATURE_USERNAME),
							clientProperties
							.get("security.signature.password")));
		}
		clientProps.put("soap.no.validate.parts", Boolean.TRUE);
		clientProps.put("use.service.registry", "true");
		// set the cxfEndpoint Properties
		cxfEndpoint.setProperties(clientProps);
		<%//for fix [TESB-12172], set default address to null to avoid override after wsdl from registry initialized. 
		%>
		final org.apache.camel.component.cxf.CxfEndpointConfigurer cxfEndpointConfigurer = cxfEndpoint.getCxfEndpointConfigurer();
		cxfEndpoint.setCxfEndpointConfigurer(new org.apache.camel.component.cxf.CxfEndpointConfigurer() {
			public void configure(org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory factory) {
				if (cxfEndpointConfigurer != null) {
					cxfEndpointConfigurer.configure(factory);
				}
				factory.setAddress(null);
			}
			public void configureClient(org.apache.cxf.endpoint.Client client) {
				if (cxfEndpointConfigurer != null) {
					cxfEndpointConfigurer.configureClient(client);
				}
			}
			public void configureServer(org.apache.cxf.endpoint.Server server) {
				if (cxfEndpointConfigurer != null) {
					cxfEndpointConfigurer.configureServer(server);
				}
			}
		});
		<%//for fix [TESB-12172], add locator feature when necessary. 
		%>
		org.apache.cxf.endpoint.ClientLifeCycleManager cLifeCycleManager = bus.getExtension(org.apache.cxf.endpoint.ClientLifeCycleManager.class);
		if (cLifeCycleManager != null) {
			cLifeCycleManager.registerListener(new org.apache.cxf.endpoint.ClientLifeCycleListener() {
				public void clientCreated(org.apache.cxf.endpoint.Client client) {
					String address = client.getEndpoint().getEndpointInfo().getAddress();
					if ((address != null) && address.startsWith("locator://")) {
						new org.talend.esb.servicelocator.cxf.LocatorFeature().initialize(client, client.getBus());
					}
				}
				public void clientDestroyed(org.apache.cxf.endpoint.Client client) {
				}
			});
		}
	}
<%
}
if(hasCXFRegistryProvider){
%>
	if (isProvider) {
		org.apache.wss4j.dom.validate.JAASUsernameTokenValidator jaasUTValidator = new org.apache.wss4j.dom.validate.JAASUsernameTokenValidator();
		jaasUTValidator.setContextName("karaf");
		// set endpoint properties
		final String userName = securityProps.get(org.apache.cxf.ws.security.SecurityConstants.SIGNATURE_USERNAME);
		final Map<String, Object> endpointProps = new HashMap<String, Object>();
		endpointProps.put(org.apache.cxf.ws.security.SecurityConstants.SIGNATURE_USERNAME, userName);
		endpointProps.put(org.apache.cxf.ws.security.SecurityConstants.SIGNATURE_PROPERTIES, securityProps.get(org.apache.cxf.ws.security.SecurityConstants.SIGNATURE_PROPERTIES));
		endpointProps.put(org.apache.cxf.rt.security.SecurityConstants.CALLBACK_HANDLER, new org.talend.esb.security.saml.WSPasswordCallbackHandler(userName, securityProps.get("security.signature.password")));
		endpointProps.put(org.apache.cxf.ws.security.SecurityConstants.USERNAME_TOKEN_VALIDATOR, jaasUTValidator);
		endpointProps.put("use.service.registry", "true");
		cxfEndpoint.setProperties(endpointProps);
	}
<%}%>
}
<%
}

if (hasCXFSamlTokenProvider || hasCXFRegistryProvider) {
%>
private Map<String, Object> securityProps;

public void setSecurityProps(Map<String, Object> securityProps) {
	this.securityProps = securityProps;
}
<%
}

if (hasCXFSamlTokenAuthorizationProvider && !hasCXFComponent) {
%>
private org.apache.cxf.interceptor.Interceptor<? extends org.apache.cxf.message.Message> authorizationInterceptor;

public void setAuthorizationInterceptor(org.apache.cxf.interceptor.Interceptor<? extends org.apache.cxf.message.Message> authorizationInterceptor) {
    this.authorizationInterceptor = authorizationInterceptor;
}
<%
}

if(hasCXFComponent && (hasCXFUsernameTokenProvider || hasCXFUsernameTokenConsumer || hasCXFSamlTokenProvider || hasCXFSamlTokenConsumer
	||hasCXFRegistryProvider || hasCXFRegistryConsumer)){
%>

private org.talend.esb.security.policy.PolicyProvider policyProvider;

public void setPolicyProvider(org.talend.esb.security.policy.PolicyProvider policyProvider) {
	this.policyProvider = policyProvider;
}

<%
if(hasCXFSamlTokenConsumer || hasCXFSamlTokenProvider){
%>

private void addSAMLToken(org.apache.camel.component.cxf.CxfEndpoint cxfEndpoint,
		boolean isProvider, boolean useAuthorization, boolean usePropagateSamlAP, String... token) {
		final org.apache.cxf.Bus bus = cxfEndpoint.getBus();
<%
if(hasCXFSamlTokenConsumer){
%>
	if (!isProvider) {
        final org.apache.cxf.ws.security.trust.STSClient stsClient;
        if (usePropagateSamlAP) {
            stsClient = org.talend.esb.security.saml.STSClientUtils.createSTSX509Client(bus, token[4]);
        } else {
            stsClient = org.talend.esb.security.saml.STSClientUtils.createSTSClient(bus, token[1], token[2]);
        }
<%if(hasCXFSamlTokenAuthorizationConsumer){%>
		if (token[3] != null && !("".equals(token[3]))) {
			org.talend.esb.security.saml.STSClientUtils.applyAuthorization(stsClient, token[3]);
		}
<%}%>
		Map<String, Object> clientProps = new HashMap<String, Object>();
		clientProps.put(
				org.apache.cxf.ws.security.SecurityConstants.STS_CLIENT,
				stsClient);

		for (Map.Entry<String, String> entry : clientProperties.entrySet()) {
			if (org.apache.cxf.ws.security.SecurityConstants.ALL_PROPERTIES
					.contains(entry.getKey())) {
				clientProps.put(entry.getKey(), entry.getValue());
			}
		}
		if(usePropagateSamlAP) {
			clientProps.put(org.apache.cxf.ws.security.SecurityConstants.SIGNATURE_USERNAME, token[4]);
			clientProps
			.put(org.apache.cxf.ws.security.SecurityConstants.CALLBACK_HANDLER,
					new org.talend.esb.security.saml.WSPasswordCallbackHandler(token[4], token[2]));
		}else {
			clientProps
			.put(org.apache.cxf.ws.security.SecurityConstants.CALLBACK_HANDLER,
					new org.talend.esb.security.saml.WSPasswordCallbackHandler(
							clientProperties
							.get(org.apache.cxf.ws.security.SecurityConstants.SIGNATURE_USERNAME),
							clientProperties
							.get("security.signature.password")));
		}
		// set the cxfEndpoint Properties
		cxfEndpoint.setProperties(clientProps);
	}
<%
}
if(hasCXFSamlTokenProvider){
%>
if (isProvider) {
		// set endpoint properties
		final String userName = (String) securityProps.get(org.apache.cxf.ws.security.SecurityConstants.SIGNATURE_USERNAME);
		final Map<String, Object> endpointProps = new HashMap<String, Object>();
		endpointProps.put(org.apache.cxf.ws.security.SecurityConstants.SIGNATURE_USERNAME, userName);
		endpointProps.put(org.apache.cxf.ws.security.SecurityConstants.SIGNATURE_PROPERTIES, securityProps.get(org.apache.cxf.ws.security.SecurityConstants.SIGNATURE_PROPERTIES));
		endpointProps.put(org.apache.cxf.rt.security.SecurityConstants.CALLBACK_HANDLER, new org.talend.esb.security.saml.WSPasswordCallbackHandler(userName, securityProps.get("security.signature.password")));
		cxfEndpoint.setProperties(endpointProps);
}

<%
}//end if(hasCXFSamlTokenProvider)
%>
		// add policy
		final org.apache.neethi.Policy policy;
		if (useAuthorization) {
			policy = policyProvider.getSAMLAuthzPolicy(bus);
		} else {
			policy = policyProvider.getSAMLPolicy(bus);
		}
		cxfEndpoint.getFeatures().add(new org.apache.cxf.ws.policy.WSPolicyFeature(policy));
}<%
}//end if(hasCXFSamlTokenConsumer || hasCXFSamlTokenProvider)
}//end if(hasCXFSamlTokenProvider || hasCXFSamlTokenConsumer||hasCXFRegistryProvider || hasCXFRegistryConsumer)
%>
			/**
			* please initial uri map
			*/
			public void configure() throws java.lang.Exception {
<%
	List< ? extends INode> processNodes = (List< ? extends INode>)process.getGraphicalNodes();
	for (INode node : processNodes) {
			if (!node.isActivate()) {
				continue;
			}
			String nodeComponentName = node.getComponent().getName();
	if("cCXF".equals(nodeComponentName)){
			IElementParameter param = node.getElementParameter("LABEL");
			String cid = node.getUniqueName();
			// http://jira.talendforge.org/browse/TESB-5241
			/*
			 * change to use label + unique to make it unique but readable
			 */
//			if(param != null && !"__UNIQUE_NAME__".equals(param.getValue())){
//				cid = (String)param.getValue()+"_"+cid;
//			}
			String endpointVar = "endpoint_" + node.getUniqueName();
			String uriRef = "uriMap.get(\"" + cid + "\")";
			String formatType = ElementParameterParser.getValue(node, "__DATAFORMAT__");

			boolean useRegistry = false;
			boolean useSecurity = false;
			if(!"RAW".equals(formatType) && !"CXF_MESSAGE".equals(formatType)){
				if(isStudioEEVersion){
					useRegistry = "true".equals(ElementParameterParser.getValue(node, "__ENABLE_REGISTRY__"));
				}
				if(!useRegistry){
					useSecurity = "true".equals(ElementParameterParser.getValue(node, "__ENABLE_SECURITY__"));
				}
			}

			String securityType = ElementParameterParser.getValue(node, "__SECURITY_TYPE__");
			String username = ElementParameterParser.getValue(node, "__USERNAME__");
			String alias = ElementParameterParser.getValue(node, "__ALIASNAME__").trim();
			boolean isProvider = node.getIncomingConnections().isEmpty();
			boolean isUseAuthorization = false;
			String securityToken = "(String[])null";
			boolean isUsePropagateSamlUP = false;
			boolean isUsePropagateSamlAP = false;
			if(useRegistry){
				securityToken = "\"Registry\"";
					String usePropagate = ElementParameterParser.getValue(node, "__USE_PROPAGATE_CREDENTIAL__");
					if("true".equals(usePropagate)){
						if(alias == null || alias.matches("\"?\\s*\"?")) {
							//no alias.
							isUsePropagateSamlUP = true;
						}else {
							isUsePropagateSamlUP = false;
						}
						isUsePropagateSamlAP = !isUsePropagateSamlUP;
					}
			}else if(useSecurity){
				if("USER".equals(securityType)){
					securityToken = "\"UsernameToken\"";
				}else if("SAML".equals(securityType)){
					securityToken = "\"SAMLToken\"";
					String samlSecurityType = ElementParameterParser.getValue(node, "__SAML_SECURITY_TYPES__");
					if("PROPAGATE_UP".equals(samlSecurityType)) {
							isUsePropagateSamlUP = true;
					}else if ("PROPAGATE_AP".equals(samlSecurityType)) {
						isUsePropagateSamlAP = true;
						username = "null";
					}
					if(isStudioEEVersion){
						isUseAuthorization = "true".equals(ElementParameterParser.getValue(node, "__USE_AUTHORIZATION__"));
					}
				}else if("BASIC".equals(securityType)){
					securityToken = "org.apache.cxf.transport.http.auth.HttpAuthHeader.AUTH_TYPE_BASIC";
				}else if("DIGEST".equals(securityType)){
					securityToken = "org.apache.cxf.transport.http.auth.HttpAuthHeader.AUTH_TYPE_DIGEST";
				}
			}
			String roleName = "\"\"";
			if(!isProvider && (useRegistry || isUseAuthorization)) {
				roleName = ElementParameterParser.getValue(node, "__ROLE_NAME__");
				if(null == roleName || "".equals(roleName)){
					roleName = "\"\"";
				}
			}
			
			if((useSecurity || useRegistry) && !isProvider) {
				String passwordFieldName = "__PASSWORD__";
%>
				<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
<%
			}
%>
				// CXF endpoint for <%=cid%>
				org.apache.camel.component.cxf.CxfEndpoint <%=endpointVar%> = getCxfEndpoint(<%=uriRef%>, <%=isProvider%>, <%=isUseAuthorization%>, <%=isUsePropagateSamlAP%>, <%=securityToken%>
<%
				if((useSecurity || useRegistry) && !isProvider){
%>
							,<%=username%>,decryptedPassword_<%=cid%>, <%=roleName%>, <%=alias%>
<%
				}
%>
						);
<%

			if((isUsePropagateSamlUP || isUsePropagateSamlAP) && !isProvider){
%>
				<%=endpointVar%>.setCxfBinding(new CXFConsumerBinding(<%=endpointVar%>));
<%
			}
			String useSL = ElementParameterParser.getValue(node, "__ENABLE_SL__");
			String useSAM = ElementParameterParser.getValue(node, "__ENABLE_SAM__");
			String useCorrelation = ElementParameterParser.getValue(node, "__ENABLE_CORRELATION__");
			if("RAW".equals(formatType)){
				useCorrelation = "false";
			}

			if ("true".equals(useCorrelation) || useRegistry) {
%>
                final String correlationId_<%=cid%> = <%=ElementParameterParser.getValue(node, "__CORRELATION_VALUE__")%>;
                if (null != correlationId_<%=cid%> && correlationId_<%=cid%>.length() > 0) {
                    correlationIDCallbackHandler_<%=cid%>.setCorrelationId(correlationId_<%=cid%>);
                    java.util.Map<String, Object> properties = new java.util.HashMap<String, Object>();
                    properties.put(org.talend.esb.policy.correlation.feature.CorrelationIDFeature.CORRELATION_ID_CALLBACK_HANDLER, 
                        correlationIDCallbackHandler_<%=cid%>);
                    <%=endpointVar%>.setProperties(properties);
                }
                <% if (!useRegistry) { %>
                    <%=endpointVar%>.getFeatures().add(new org.talend.esb.policy.correlation.feature.CorrelationIDFeature());
                <% } %>
<%			}
			if ("true".equals(useSL) && (isProvider || !useRegistry)) {
                if (!isProvider) {
%>
                    <%=endpointVar%>.setAddress("locator://cCXF");
<%
                }
				List<Map<String, String>> customProperties = (List<Map<String,String>>) ElementParameterParser.getObjectValue(node, "__SL_META_DATA__");
%>
				// Add Service Locator Service to <%=endpointVar%>
				org.talend.esb.servicelocator.cxf.LocatorFeature locatorFeature_<%=cid%> = new org.talend.esb.servicelocator.cxf.LocatorFeature();
				if (null == bundleContext) {
					<%=endpointVar%>.setBus(new org.apache.cxf.bus.spring.SpringBusFactory().createBus("META-INF/tesb/locator/beans.xml"));
				}
				<% if (!customProperties.isEmpty()) { %>
					java.util.Map<String, String> slCustomProps_<%=cid%> = new java.util.HashMap<String, String>();
					<% for (Map<String, String> custProp : customProperties) { %>
						slCustomProps_<%=cid%>.put(<%=custProp.get("NAME")%>, <%=custProp.get("VALUE")%>);
					<% } %>
					<% if (isProvider) { %>
						locatorFeature_<%=cid%>.setAvailableEndpointProperties(slCustomProps_<%=cid%>);
					<% } else { %>
						locatorFeature_<%=cid%>.setRequiredEndpointProperties(slCustomProps_<%=cid%>);
					<% } %>
				<% } %>

				<%=endpointVar%>.getFeatures().add(locatorFeature_<%=cid%>);
<%
			}
			//http://jira.talendforge.org/browse/TESB-3850
			// !"true".equals(useRegistry) - https://jira.talendforge.org/browse/TESB-10725

			if ("true".equals(useSAM) && !"RAW".equals(formatType) && !useRegistry) {
%>
				// Add Service Activity Monitor Service to <%=endpointVar%>
				if (eventFeature != null) {
					<%=endpointVar%>.getFeatures().add(eventFeature);
				}
<%
			}
	}else if("cFtp".equals(nodeComponentName)){
			String ftpEndpointVar = "ftp_" + node.getUniqueName();
			String cid = node.getUniqueName();
//			IElementParameter labelParam = node.getElementParameter("LABEL");
//			if(labelParam != null && !"__UNIQUE_NAME__".equals(labelParam.getValue())){
//				cid = (String)labelParam.getValue()+"_"+cid;
//			}
			String uriRef = "uriMap.get(\"" + cid + "\")";

			String userName = ElementParameterParser.getValue(node, "__USERNAME__");
			if("".trim().equals(userName)){
				userName = null;
			}
			String password = ElementParameterParser.getValue(node, "__PASSWORD__");
			if("".trim().equals(password)){
				password = null;
			}
			String ftpServer = ElementParameterParser.getValue(node, "__SERVER__");
			String ftpPort = ElementParameterParser.getValue(node, "__PORT__");
			String directory = ElementParameterParser.getValue(node, "__DIRECTORY__");
			if("".trim().equals(directory)){
				directory = null;
			}
			
			String passwordFieldName = "__PASSWORD__";
%>
			<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
			
			org.apache.camel.component.file.remote.RemoteFileEndpoint<?> <%=ftpEndpointVar%> = getFtpEndpoint(<%=uriRef%>, <%=ftpServer%>, Integer.parseInt(String.valueOf(<%=ftpPort%>)), <%=userName%>, decryptedPassword_<%=cid%>, <%=directory%>);
<%

	}else if("cMail".equals(nodeComponentName)){
			String mailEndpointVar = "mail_" + node.getUniqueName();
			String cid = node.getUniqueName();
//			IElementParameter labelParam = node.getElementParameter("LABEL");
//			if(labelParam != null && !"__UNIQUE_NAME__".equals(labelParam.getValue())){
//				cid = (String)labelParam.getValue()+"_"+cid;
//			}
			String uriRef = "uriMap.get(\"" + cid + "\")";

			String userName = ElementParameterParser.getValue(node, "__USERNAME__");
			String subject = ElementParameterParser.getValue(node, "__SUBJECT__");
			String from = ElementParameterParser.getValue(node, "__FROM__");
			String to = ElementParameterParser.getValue(node, "__TO__");
			String cc = ElementParameterParser.getValue(node, "__CC__");
			String bcc = ElementParameterParser.getValue(node, "__BCC__");
			String passwordFieldName = "__PASSWORD__";
%>
			<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
			
			org.apache.camel.component.mail.MailEndpoint <%=mailEndpointVar%> = getMailEndpoint(<%=uriRef%>, <%=userName%>, decryptedPassword_<%=cid%>, <%=subject%>, <%=from%>, <%=to%>, <%=cc%>, <%=bcc%>);
<%  }else if("cMap".equals(nodeComponentName)){

			String mapVarPath = ElementParameterParser.getValue(node, "__HMAP_VAR_PATH__");
			mapVarPath = TalendQuoteUtils.removeQuotes(mapVarPath);
			if (mapVarPath != null && mapVarPath.trim().length()>0) {
				if (mapVarPath.startsWith("context.")) {
%>
			org.talend.transform.runtime.api.MapPathHelper mapPathHelper = new org.talend.transform.runtime.api.MapPathHelper(<%=mapVarPath%>);
<%
    			} else {
%>
			org.talend.transform.runtime.api.MapPathHelper mapPathHelper = new org.talend.transform.runtime.api.MapPathHelper("<%=mapVarPath%>");
<%
    		}} else {
%>
			org.talend.transform.runtime.api.MapPathHelper mapPathHelper = new org.talend.transform.runtime.api.MapPathHelper(null);	
<%	}}else if("cAggregate".equals(nodeComponentName)){
				boolean usePersistence = "true".equals(ElementParameterParser.getValue(node, "__USE_PERSISTENCE__"));
				String repository = ElementParameterParser.getValue(node, "__REPOSITORY__");
				if (usePersistence) {
					boolean useRecovery = "true".equals(ElementParameterParser.getValue(node, "__USE_RECOVERY__"));
					String recoveryInterval = ElementParameterParser.getValue(node, "__RECOVERY_INTERVAL__");
					String deadLetterUri = ElementParameterParser.getValue(node, "__DEAD_LETTER_URI__");
					String maximumRedeliveries = ElementParameterParser.getValue(node, "__MAXIMUM_REDELIVERIES__");

					if ("AGGREGATION".equals(repository)) {
%>
						org.apache.camel.spi.AggregationRepository repo_<%=node.getUniqueName() %> = new <%=ElementParameterParser.getValue(node, "__CUSTOM_REPOSITORY__") %>;
<%
					} else if ("RECOVERABLE".equals(repository)) {
%>
						org.apache.camel.spi.RecoverableAggregationRepository repo_<%=node.getUniqueName() %> = new <%=ElementParameterParser.getValue(node, "__CUSTOM_REPOSITORY__") %>;
<%
						if (useRecovery) {
%>
							repo_<%=node.getUniqueName() %>.setUseRecovery(true);
							repo_<%=node.getUniqueName() %>.setMaximumRedeliveries(<%=maximumRedeliveries%>);
							repo_<%=node.getUniqueName() %>.setDeadLetterUri(<%=deadLetterUri%>);
							repo_<%=node.getUniqueName() %>.setRecoveryInterval(<%=recoveryInterval%>);
<%
						}
					} else if ("HAWTDB".equals(repository)) {
						boolean usePersistentFile = "true".equals(ElementParameterParser.getValue(node, "__USE_PERSISTENT_FILE__"));
						String persistentFile = ElementParameterParser.getValue(node, "__PERSISTENT_FILENAME__");
						if (usePersistentFile) {
%>
							org.apache.camel.component.hawtdb.HawtDBAggregationRepository repo_<%=node.getUniqueName() %> = new org.apache.camel.component.hawtdb.HawtDBAggregationRepository("<%=node.getUniqueName() %>", <%=persistentFile%>);
<%
						} else {
%>
							org.apache.camel.component.hawtdb.HawtDBAggregationRepository repo_<%=node.getUniqueName() %> = new org.apache.camel.component.hawtdb.HawtDBAggregationRepository("<%=node.getUniqueName() %>");
<%
						}
						if (useRecovery) {
%>
							repo_<%=node.getUniqueName() %>.setUseRecovery(true);
							repo_<%=node.getUniqueName() %>.setMaximumRedeliveries(<%=maximumRedeliveries%>);
							repo_<%=node.getUniqueName() %>.setDeadLetterUri(<%=deadLetterUri%>);
							repo_<%=node.getUniqueName() %>.setRecoveryInterval(<%=recoveryInterval%>);
<%
						}
					}
				}

				String language = ElementParameterParser.getValue(node, "__LANGUAGES__");
				String useNamespaces = ElementParameterParser.getValue(node, "__USE_NAMESPACES__");
				List<Map<String, String>> namespaceValues = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__NAMESPACES__");
				if("xpath".equals(language)&&"true".equals(useNamespaces)){
					String cid = node.getUniqueName();

%>
				Map<String, String> <%=cid%>NSMap = new HashMap<String, String>();
				{
<%
					for(Map<String, String> m: namespaceValues){
						String pre = m.get("PREFIX");
						String uri = m.get("URI");
%>
						<%=cid%>NSMap.put(<%=pre%>, <%=uri%>);
<%
					}
%>
				}
<%
				}
	}else if("cLoop".equals(nodeComponentName)){
		String type = ElementParameterParser.getValue(node, "__LOOP_TYPE__");
		if(!"EXPRESSION_TYPE".equals(type)){
			continue;
		}
		String language = ElementParameterParser.getValue(node, "__LANGUAGES__");
		if(!"xpath".equals(language)){
			continue;
		}
		String useNamespaces = ElementParameterParser.getValue(node, "__USE_NAMESPACES__");
		if(!"true".equals(useNamespaces)){
			continue;
		}
		String cid = node.getUniqueName();
		List<Map<String, String>> namespaceValues = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__NAMESPACES__");
%>
		Map<String, String> <%=cid%>NSMap = new HashMap<String, String>();
		{
<%
			for(Map<String, String> m: namespaceValues){
				String pre = m.get("PREFIX");
				String uri = m.get("URI");
%>
				<%=cid%>NSMap.put(<%=pre%>, <%=uri%>);
<%
			}
%>
		}
<%

	}else if("cMessageFilter".equals(nodeComponentName)){
		String language = ElementParameterParser.getValue(node, "__LANGUAGES__");
		if(!"xpath".equals(language)){
			continue;
		}
		String useNamespaces = ElementParameterParser.getValue(node, "__USE_NAMESPACES__");
		if(!"true".equals(useNamespaces)){
			continue;
		}
		String cid = node.getUniqueName();
		List<Map<String, String>> namespaceValues = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__NAMESPACES__");
%>
		Map<String, String> <%=cid%>NSMap = new HashMap<String, String>();
		{
<%
			for(Map<String, String> m: namespaceValues){
				String pre = m.get("PREFIX");
				String uri = m.get("URI");
%>
				<%=cid%>NSMap.put(<%=pre%>, <%=uri%>);
<%
			}
%>
		}
<%
	}else if("cRecipientList".equals(nodeComponentName)||"cSplitter".equals(nodeComponentName)){
		String language = ElementParameterParser.getValue(node, "__LANGUAGES__");
		if(!"xpath".equals(language)){
			continue;
		}
		String useNamespaces = ElementParameterParser.getValue(node, "__USE_NAMESPACES__");
		if(!"true".equals(useNamespaces)){
			continue;
		}
		String cid = node.getUniqueName();
		List<Map<String, String>> namespaceValues = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__NAMESPACES__");
%>
		Map<String, String> <%=cid%>NSMap = new HashMap<String, String>();
		{
<%
			for(Map<String, String> m: namespaceValues){
				String pre = m.get("PREFIX");
				String uri = m.get("URI");
%>
				<%=cid%>NSMap.put(<%=pre%>, <%=uri%>);
<%
			}
%>
		}
<%
	}else if("cSetBody".equals(nodeComponentName)){
		String language = ElementParameterParser.getValue(node, "__LANGUAGES__");
		if(!"xpath".equals(language)){
			continue;
		}
		String useNamespaces = ElementParameterParser.getValue(node, "__USE_NAMESPACES__");
		if(!"true".equals(useNamespaces)){
			continue;
		}
		String cid = node.getUniqueName();
		List<Map<String, String>> namespaceValues = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__NAMESPACES__");
%>
		Map<String, String> <%=cid%>NSMap = new HashMap<String, String>();
		{
<%
			for(Map<String, String> m: namespaceValues){
				String pre = m.get("PREFIX");
				String uri = m.get("URI");
%>
				<%=cid%>NSMap.put(<%=pre%>, <%=uri%>);
<%
			}
%>
		}
<%
	}else if("cSetHeader".equals(nodeComponentName)){
		String useNamespaces = ElementParameterParser.getValue(node, "__USE_NAMESPACES__");
		if(!"true".equals(useNamespaces)){
			continue;
		}
		String cid = node.getUniqueName();
		List<Map<String, String>> namespaceValues = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__NAMESPACES__");
%>
		Map<String, String> <%=cid%>NSMap = new HashMap<String, String>();
		{
<%
			for(Map<String, String> m: namespaceValues){
				String pre = m.get("PREFIX");
				String uri = m.get("URI");
%>
				<%=cid%>NSMap.put(<%=pre%>, <%=uri%>);
<%
			}
%>
		}
<%
	}else if("cTalendJob".equals(nodeComponentName)){
	List< ? extends IConnection> conns = node.getIncomingConnections();
	String cid = node.getUniqueName();
	List<Map<String, String>> contextParams = null;
	if(conns.size()>0) {
		String useJar = ElementParameterParser.getValue(node, "__FROM_EXTERNAL_JAR__");
		// when propagateHeader parameter will be removed the https://github.com/Talend/tesb-rt-se/blob/master/camel-talendjob/src/main/java/org/talend/camel/TalendProducer.java
		// have to be changed - remove populateTalendContextParamsWithCamelHeaders(exchange, args);
		String propagateHeader = ElementParameterParser.getValue(node, "__PROPAGATE_HEADER__");
		if("true".equals(useJar)){
			String typeName = ElementParameterParser.getValue(node, "__JOB__");
			String context = ElementParameterParser.getValue(node, "__CONTEXT__");
			contextParams = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__EXTERNAL_JAR_CONTEXTPARAMS__");
%>
		org.talend.camel.TalendEndpoint endpoint_<%=cid%> =
		    (org.talend.camel.TalendEndpoint) endpoint("talend:"+ <%=typeName%>+ "?context=" + <%=context%>+"&propagateHeader=<%=propagateHeader%>");
<%
		}else{
			String typeName = "";
			contextParams = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__CONTEXTPARAMS__");
			String context = (String) node.getElementParameter("PROCESS_TYPE_CONTEXT").getValue();
			String id = (String) node.getElementParameter("PROCESS_TYPE_PROCESS").getValue();
			if(id != null){
				String useSelectedContext = ElementParameterParser.getValue(node, "__USE_SELECTED_CONTEXT__");
				String useRouteContext = ElementParameterParser.getValue(node, "__USE_ROUTE_CONTEXT__");
				String useJobContext = ElementParameterParser.getValue(node, "__USE_JOB_CONTEXT__");
				if("true".equals(useRouteContext)){
					// TESB-13614
					// we can't define context during codegeneration in this case, because
					// context will provided to the job before execution
					context = "NOT_DEFINED";					

				}else if("true".equals(useJobContext)){
					context = ElementParameterParser.getProcessSelectedContext(id);
				}

				String jobName = ElementParameterParser.getStringElementParameterValue(node.getElementParameter("SELECTED_JOB_NAME"));
//				String jobName = (String) node.getElementParameter("SELECTED_JOB_NAME").getValue();
				String jobVersion = ElementParameterParser.getStringElementParameterValue(node.getElementParameter("PROCESS_TYPE_VERSION"));
				String jobFolderName = JavaResourcesHelper.getJobFolderName(jobName, jobVersion);
				typeName = codeGenArgument.getCurrentProjectName().toLowerCase() + "." + jobFolderName + "." + jobName;
			}
			
			if("NOT_DEFINED".equals(context)){
        		String executionContextVariable = "contextStr";
%>
			org.talend.camel.TalendEndpoint endpoint_<%=cid%> =
			    (org.talend.camel.TalendEndpoint) endpoint("talend:"+"<%=typeName%>"+"?context="+<%=executionContextVariable%>+"&propagateHeader=<%=propagateHeader%>");
<%			
			} else {
%>
			org.talend.camel.TalendEndpoint endpoint_<%=cid%> =
			    (org.talend.camel.TalendEndpoint) endpoint("talend:"+"<%=typeName%>"+"?context="+"<%=context%>&propagateHeader=<%=propagateHeader%>");
<%			
			}			
						
		}
		int contextParamsSize = contextParams.size();
		if(contextParamsSize > 0){
%>
{
		Map <String, String> propertiesMap = new HashMap<String, String>();
<%
		for (int i=0; i<contextParamsSize; i++) {
				Map<String, String> contextParam = contextParams.get(i);
				String paramName;
				String paramValue;
				if("true".equals(useJar)){
					paramName = contextParam.get("EXTERNAL_JAR_PARAM_NAME_COLUMN");
					paramValue = contextParam.get("EXTERNAL_JAR_PARAM_VALUE_COLUMN");

				} else {
					paramName = "\"" + contextParam.get("PARAM_NAME_COLUMN") + "\"";
					paramValue = contextParam.get("PARAM_VALUE_COLUMN");
				}
%>
				propertiesMap.put(<%=paramName%>, propertyToString(<%=paramValue%>));
<%
		}
%>
		endpoint_<%=cid%>.setEndpointProperties(propertiesMap);
}
<%
	}
	}
	}
}
%>
